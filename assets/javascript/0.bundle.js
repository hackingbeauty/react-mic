webpackJsonp([0],{793:function(e,n,o){var a=o(0),t=o(23),d=o(234).PageRenderer;d.__esModule&&(d=d.default);var l=t({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:o(795)}},componentWillMount:function(){},render:function(){return a.createElement(d,Object.assign({},this.props,{content:this.state.content}))}});l.__catalog_loader__=!0,e.exports=l},795:function(e,n){e.exports="# Modal\n\n[See demo](#demo)\n\nThe Modal component is highly reusable and customizable.  It comes with standard style and functional defaults that you can override if you wish.\n\nThe Modal component comes with 4 components.  They are:\n\n```<Modal />```\n```<ModalHeader />```\n```<ModalBody />```\n```<ModalFooter />```\n\nHe is a sample modal:\n\n```\n...\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter\n} from 'demandbase-ui-library'\n...\n\n  <Modal\n    modalKey=\"modal-1-key\"\n    modalState={ui.Modal}>\n    <ModalHeader title=\"Modal 1 Header Title\" />\n    <ModalBody>\n      Moday content goes here.\n    </ModalBody>\n    <ModalFooter>\n      Optional Modal Footer content goes here.\n    </ModalFooter>\n  </Modal>\n```\n\n## Demo\n\n```react\nnoSource: true\n---\n<ModalDemo />\n```\n\n## Properties\n\n##### modalKey **(required)**\n\nType: String\n\nEach modal must have a unique key to identify it.  You can have any number of modals you wish in one view; however, each modal's ```modalKey``` prop must be unique.\n\n##### modalState **(required)**\n\nType: Object\n\nThe ```modalState``` prop must be passed into each modal in order to determine whether it should be opened or closed.  The object, which must have the shape as indicated in the example below, is maintained by whatever you use to maintain state in your application.  In Matador, modal state is maintained in Redux.\n\n\nExample:\n\n```\n{\n  Modal: {\n    modalKey: 'modal-1-key',\n    showModal: true\n  }\n}\n```\n\n##### closeDispatcher **(required)**\n\nYou need to pass the dispatcher that gets called in order to close the modal.  This is a dispatcher you specify on your end.\n\n\n##### className **(optional)**\n\nType: String\n\nIf you want to customize the look of a modal, you must pass in a CSS class name.  This CSS class name must exist in the CSS Module that also must be passed in.\n\n##### cssModule **(optional)**\n\nType: String\n\nYou can pass in a CSS Module directly into a modal to customize the style of any element.\n\n##### showCancel **(optional)**\n\nType: Boolean\n\nYou have the option of displaying a cancel button in the footer of the modal.  It's displayed by default.\n"}});